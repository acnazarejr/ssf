#ifndef _LAP_H_
#define _LAP_H_
#include "SSFCore.h"
#include "SSFLAPData.h"
#include "SSFFeed.h"
#include "SSFFrame.h"
#include "SSFSample.h"
#include "SSFSamples.h" 
#include "SSFTracklet.h"
#include "SSFFeatures.h"
#include "SSFImage.h"
#include "SSFDetwins.h"
#include "SSFObject.h"
#include "SSFCamera.h" 
#include "SSFSlidingWindow.h"
#include "SSFUserData.h"
#include "SSFObjectCandidates.h"
#include "shared_memory.h"





class LAP : public SharedMemory {
CondMutexManager<string> feedsCond;
map<string, SMIndexType> feedMap;
vector<bool> cameraControl;			// manage which cameras can be controlled
SSFMutex mutexFeeds;
SSFMutex mutexFrames;
SSFMutex mutexSamples;
SSFMutex mutexTracklet;
SSFMutex mutexObject;
SSFMutex mutexCameras;
SSFMutex mutexAccess;

	// retrieve a frame 
	SSFFrame *RetrieveLAPFrame(SMIndexType frameID);
	
	// set features for a given frame indexed by frameID
	void SetFrameFeatures(SMIndexType frameID, SSFFeatures *feats);

public:
	LAP();

	/* Feed */
	// create a new feed - returns its ID
	SMIndexType CreateFeed(string dataType);

	// return the feed ID by its name
	SMIndexType GetFeedIDbyName(string feedName);



	// check if processing of modID for dataType has ended
	bool IsProcessingFinished(string modID, string dataType);

	// retrieve the last processed frame from modFrom with type dataType. If lock == true, it won't return, unless it is a new frame, different from previous
	SMIndexType RetrieveLastProcessedFrameID(string modFrom, string dataType, bool lock);

	// retrieve the frameID of the data (with dataType) generated by modFrom in position
	SMIndexType RetrieveFrameIDbyPosition(string modFrom, string dataType, SMIndexType position);



	/* Frame */
	// instantiate a new frame for feedID - returns its ID
	SMIndexType CreateFrame(SMIndexType feedID);

	/* Frame image */
	// return image data for imageID
	SSFImage *GetFrameImage(SMIndexType frameID);

	// set an image for a given frame indexed by frameID
	void SetFrameImage(SMIndexType frameID, SSFImage *image);

	// return the image patch according to the window passed
	SSFImage *GetFramePatch(SMIndexType frameID, SSFRect window);

	/* Frame features */
	// set features for a given frame indexed by frameID
	SSFFeatures *GetFrameFeatures(SMIndexType frameID);

	// extract features for the whole frame for the list of feature setups
	void ExtractFrameFeatures(SMIndexType frameID, int featSetupIdx);
	


	/* Frame filename */
	// get the frame filename
	string GetFrameFilename(SMIndexType frameID);
	
	// set the frame filename
	void SetFrameFilename(SMIndexType frameID, string filename);



	/* Frame mask */
	// get mask for a given frame indexed by frameID
	SSFImage *GetFrameMask(string modFrom, SMIndexType frameID);

	// set mask for a given frame indexed by frameID
	void SetFrameMask(SMIndexType frameID, SSFImage *mask);




	/* Frame Sliding windows */
	// get detection windows for a given frame
	SSFSlidingWindow *GetSlidingWindows(string modFrom, SMIndexType frameID);

	// set detection windows for a given frame
	void SetSlidingWindows(SMIndexType frameID, SSFSlidingWindow *sldwins, string attribute = "");


	
	/* Frame samples */
	// get sample by sampleID
	SSFSample *GetSample(SMIndexType sampleID);

	// add a frame sample - already add in the SSFSamples for the frameID
	SMIndexType AddFrameSample(SMIndexType frameID, SSFSample *sample);

	// set that the writing of samples is finished for the frameID
	void EndFrameSamples(SMIndexType frameID);

	// get samples attached to frameID
	SSFSamples *GetFrameSamples(string modFrom, SMIndexType frameID);

	// extract features from a given sample with a desired sample size
	void ExtractSampleFeatures(SMIndexType sampleID, int featSetupIdx, int height = 0, int width = 0, int interpolationMethod = 1);



	/* Tracklets */
	// retrieve tracklet by its id
	SSFTracklet *RetrieveTracklet(SMIndexType trackletID);

	// create a new tracklet with a set of samples
	SMIndexType SetTracklet(SSFTracklet *tracklet, string attribute = "");

	// retrieve the position-th tracklet generated by the module modFrom (position starts in 0)
	SSFTracklet *RetrieveTracklet(string modFrom, SMIndexType position);


	/* Objects */
	// create a new object with a set of tracklets
	SMIndexType CreateObject(vector<SMIndexType> &trackletIDs, string objID, string attribute = "");

	// retrieve the idx-th object created by modFrom (return NULL if the objects are finished)
	SSFObject *RetrieveObject(string modFrom, SMIndexType position);

	// retrieve object by its id
	SSFObject *RetrieveObject(SMIndexType id);

	// merge two objects setting a new ID (if empty, an arbitrary name will be assigned) - return the index of the new object
	SMIndexType MergeObjects(SMIndexType IdxObj1, SMIndexType IdxObj2, string newID = "");

	// retrieve features of samples in the object objID - features for each sample will be in stored in one vector position (do not release memory for SSFFeatures)
	vector<SSFFeatures *> ExtractObjSampleFeatures(SMIndexType objID, int featSetupIdx);


	/* Camera Control */
	// check if camera is able to receive commands
	//bool IsCameraControlEnabled(SMIndexType feedID);

	// set feedID camera being able to be controlled
	//void EnableCameraControl(SMIndexType feedID);

	// set command to the camera
	//void SetCameraCommand(SMIndexType feedID, SSFCamera *command);

	// retrieve the camera command
	//SSFCamera *RetrieveCameraCommand(SMIndexType feedID);
	


	/* User data */
	// set data
	//void SetUserData(SSFUserData *data);

	// retrieve data from position pos
	//SSFUserData *GetUserData(string modFrom, string attribute, SMIndexType pos);



	/* Object Candidates */
	void SetObjectCandidates(SSFObjectCandidates *objCandidates, string attribute = "");

	SSFObjectCandidates *GetObjectCandidates(string modFrom, SMIndexType pos);


	/* FES */
	// initialize a new feature extraction method - return its signature
	size_t FES_InitializeExtractionMethod(string setupID, string paramFile);

	// set feature extraction request
	void FES_SetRequest(FESRequest *request);
};



extern LAP glb_sharedMem;
#endif